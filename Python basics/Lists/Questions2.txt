1).
Greatest Common Divisor
Problem Introduction
The greatest common divisor GCD(𝑎,𝑏) of two non-negative integers 𝑎 and 𝑏 (which are not both equal to 0) is the greatest integer 𝑑 that divides both 𝑎 and 𝑏. Your goal in this problem is to implement the Euclidean algorithm for computing the greatest common divisor.
Efficient algorithm for computing the greatest common divisor is an important basic primitive of commonly used cryptographic algorithms like RSA.
Problem Description
Task. Given two integers 𝑎 and 𝑏, find their greatest common divisor.
Input Format.

The two integers 𝑎, 𝑏 are given in the same line separated by space. Constraints. 1≤𝑎,𝑏≤2·109.

Output Format. 
Output GCD(𝑎, 𝑏).

Sample 1.
Input:
18 35

Output:
1

Hint
18 and 35 do not have common non-trivial divisors.


Sample 2.
Input:
28851538 1183019

Output:
17657

Hint
28851538 = 17657 · 1634, 1183019 = 17657 · 67.


2).
Last Digit of a Large Fibonacci Number
Problem Introduction
Your goal in this problem is to find the last digit of 𝑛-th Fibonacci number. Recall that Fibonacci numbers grow exponentially fast. For example,
𝐹200 = 280571172992510140037611932413038677189525. Therefore, a solution like
will turn out to be too slow, because as 𝑖 grows the 𝑖th iteration of the loop computes the sum of longer and longer numbers. Also, for example, 𝐹1000 does not fit into the standard C++ int type. To overcome this difficulty, you may want to store in 𝐹[𝑖] not the 𝑖th Fibonacci number itself, but just its last digit (that is, 𝐹𝑖 mod 10). Computing the last digit of 𝐹𝑖 is easy: it is just the last digit of the sum of the last digits of 𝐹𝑖−1 and 𝐹𝑖−2:
𝐹 [𝑖] ← (𝐹 [𝑖 − 1] + 𝐹 [𝑖 − 2]) mod 10
This way, all 𝐹[𝑖]’s are just digits, so they fit perfectly into any standard integer type, and computing a sum
of 𝐹 [𝑖 − 1] and 𝐹 [𝑖 − 2] is performed very quickly.
Problem Description
Task. Given an integer 𝑛, find the last digit of the 𝑛th Fibonacci number 𝐹𝑛 (that is, 𝐹𝑛 mod 10). 
Input Format.
The input consists of a single integer 𝑛.

Constraints. 0 ≤ 𝑛 ≤ 107.

Output Format. 
Output the last digit of 𝐹𝑛.

Sample 1.
Input:
3
Output:
2
𝐹3 = 2.

Sample 2.
Input:
331
Output:
9

HINT
𝐹331 =668996615388005031531000081241745415306766517246774551964595292186469.
𝐹[0] ← 0
𝐹[1] ← 1
for 𝑖 from 2 to 𝑛:
𝐹 [𝑖] ← 𝐹 [𝑖 − 1] + 𝐹 [𝑖 − 2] print(𝐹[𝑛] mod 10)
4


Sample 3.
Input:
327305

Output:
5

HINT
𝐹327305 does not fit into one line of this pdf, but its last digit is equal to 5.


3).
Money Change
Problem Description
Task. The goal in this problem is to find the minimum number of coins needed to change the input value (an integer) into coins with denominations 1, 5, and 10.
Input Format. 
The input consists of a single integer 𝑚.
Constraints. 1 ≤ 𝑚 ≤ 103.

Output Format. 
Output the minimum number of coins with denominations 1, 5, 10 that changes 𝑚.

Sample 1.
Input:
2
Output:
2

solution  2 = 1 + 1.


Sample 2.
Input:
28
Output:
6

solution  28 = 10 + 10 + 5 + 1 + 1 + 1.